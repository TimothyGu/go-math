package {{.PackageName}}

// Code generated by generate/generate.go from multiple_test.go.tmpl. DO NOT EDIT.

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func ExampleRoundToMultiple_even() {
	fmt.Println(RoundToMultiple(4, 2))
	fmt.Println(RoundToMultiple(5, 2))
	fmt.Println(RoundToMultiple(6, 2))
{{if .Signed}}
	fmt.Println(RoundToMultiple(-4, 2))
	fmt.Println(RoundToMultiple(-5, 2))
	fmt.Println(RoundToMultiple(-6, 2))
{{end -}}
	// Output:
	// 4
	// 6
	// 6
{{- if .Signed}}
	// -4
	// -6
	// -6
{{end}}
}

func ExampleRoundToMultiple_odd() {
	fmt.Println(RoundToMultiple(6, 3))
	fmt.Println(RoundToMultiple(7, 3))
	fmt.Println(RoundToMultiple(8, 3))
	fmt.Println(RoundToMultiple(9, 3))
{{if .Signed}}
	fmt.Println(RoundToMultiple(-6, 3))
	fmt.Println(RoundToMultiple(-7, 3))
	fmt.Println(RoundToMultiple(-8, 3))
	fmt.Println(RoundToMultiple(-9, 3))
{{end -}}
	// Output:
	// 6
	// 6
	// 9
	// 9
{{- if .Signed}}
	// -6
	// -6
	// -9
	// -9
{{end}}
}

func TestRoundToMultiple(t *testing.T) {
	t.Run("ZeroMultiple", func(t *testing.T) {
		assert.Equal(t, {{.TypeName}}(6), RoundToMultiple(6, 0))
		assert.Equal(t, {{.TypeName}}(7), RoundToMultiple(7, 0))
		assert.Equal(t, {{.TypeName}}(8), RoundToMultiple(8, 0))
		assert.Equal(t, {{.TypeName}}(9), RoundToMultiple(9, 0))
{{- if .Signed}}
		assert.Equal(t, {{.TypeName}}(-6), RoundToMultiple(-6, 0))
		assert.Equal(t, {{.TypeName}}(-7), RoundToMultiple(-7, 0))
		assert.Equal(t, {{.TypeName}}(-8), RoundToMultiple(-8, 0))
		assert.Equal(t, {{.TypeName}}(-9), RoundToMultiple(-9, 0))
{{end -}}
	})
{{- if .Signed}}
	t.Run("NegativeMultiple", func(t *testing.T) {
		assert.Equal(t, {{.TypeName}}(6), RoundToMultiple(6, -3))
		assert.Equal(t, {{.TypeName}}(7), RoundToMultiple(7, -3))
		assert.Equal(t, {{.TypeName}}(8), RoundToMultiple(8, -3))
		assert.Equal(t, {{.TypeName}}(9), RoundToMultiple(9, -3))
		assert.Equal(t, {{.TypeName}}(-6), RoundToMultiple(-6, -3))
		assert.Equal(t, {{.TypeName}}(-7), RoundToMultiple(-7, -3))
		assert.Equal(t, {{.TypeName}}(-8), RoundToMultiple(-8, -3))
		assert.Equal(t, {{.TypeName}}(-9), RoundToMultiple(-9, -3))
	})
{{end -}}
}

func ExampleFloorToMultiple() {
	fmt.Println(FloorToMultiple(6, 3))
	fmt.Println(FloorToMultiple(7, 3))
	fmt.Println(FloorToMultiple(8, 3))
	fmt.Println(FloorToMultiple(9, 3))
{{if .Signed}}
	fmt.Println(FloorToMultiple(-6, 3))
	fmt.Println(FloorToMultiple(-7, 3))
	fmt.Println(FloorToMultiple(-8, 3))
	fmt.Println(FloorToMultiple(-9, 3))
{{end -}}
	// Output:
	// 6
	// 6
	// 6
	// 9
{{- if .Signed}}
	// -6
	// -9
	// -9
	// -9
{{end}}
}

func TestFloorToMultiple(t *testing.T) {
	t.Run("ZeroMultiple", func(t *testing.T) {
		assert.Equal(t, {{.TypeName}}(6), FloorToMultiple(6, 0))
		assert.Equal(t, {{.TypeName}}(7), FloorToMultiple(7, 0))
		assert.Equal(t, {{.TypeName}}(8), FloorToMultiple(8, 0))
		assert.Equal(t, {{.TypeName}}(9), FloorToMultiple(9, 0))
{{- if .Signed}}
		assert.Equal(t, {{.TypeName}}(-6), FloorToMultiple(-6, 0))
		assert.Equal(t, {{.TypeName}}(-7), FloorToMultiple(-7, 0))
		assert.Equal(t, {{.TypeName}}(-8), FloorToMultiple(-8, 0))
		assert.Equal(t, {{.TypeName}}(-9), FloorToMultiple(-9, 0))
{{end -}}
	})
{{- if .Signed}}
	t.Run("NegativeMultiple", func(t *testing.T) {
		assert.Equal(t, {{.TypeName}}(6), FloorToMultiple(6, -3))
		assert.Equal(t, {{.TypeName}}(7), FloorToMultiple(7, -3))
		assert.Equal(t, {{.TypeName}}(8), FloorToMultiple(8, -3))
		assert.Equal(t, {{.TypeName}}(9), FloorToMultiple(9, -3))
		assert.Equal(t, {{.TypeName}}(-6), FloorToMultiple(-6, -3))
		assert.Equal(t, {{.TypeName}}(-7), FloorToMultiple(-7, -3))
		assert.Equal(t, {{.TypeName}}(-8), FloorToMultiple(-8, -3))
		assert.Equal(t, {{.TypeName}}(-9), FloorToMultiple(-9, -3))
	})
{{end -}}
}

func ExampleCeilToMultiple() {
	fmt.Println(CeilToMultiple(6, 3))
	fmt.Println(CeilToMultiple(7, 3))
	fmt.Println(CeilToMultiple(8, 3))
	fmt.Println(CeilToMultiple(9, 3))
{{if .Signed}}
	fmt.Println(CeilToMultiple(-6, 3))
	fmt.Println(CeilToMultiple(-7, 3))
	fmt.Println(CeilToMultiple(-8, 3))
	fmt.Println(CeilToMultiple(-9, 3))
{{end -}}
	// Output:
	// 6
	// 9
	// 9
	// 9
{{- if .Signed}}
	// -6
	// -6
	// -6
	// -9
{{end}}
}

func TestCeilToMultiple(t *testing.T) {
	t.Run("ZeroMultiple", func(t *testing.T) {
		assert.Equal(t, {{.TypeName}}(6), CeilToMultiple(6, 0))
		assert.Equal(t, {{.TypeName}}(7), CeilToMultiple(7, 0))
		assert.Equal(t, {{.TypeName}}(8), CeilToMultiple(8, 0))
		assert.Equal(t, {{.TypeName}}(9), CeilToMultiple(9, 0))
{{- if .Signed}}
		assert.Equal(t, {{.TypeName}}(-6), CeilToMultiple(-6, 0))
		assert.Equal(t, {{.TypeName}}(-7), CeilToMultiple(-7, 0))
		assert.Equal(t, {{.TypeName}}(-8), CeilToMultiple(-8, 0))
		assert.Equal(t, {{.TypeName}}(-9), CeilToMultiple(-9, 0))
{{end -}}
	})
{{- if .Signed}}
	t.Run("NegativeMultiple", func(t *testing.T) {
		assert.Equal(t, {{.TypeName}}(6), CeilToMultiple(6, -3))
		assert.Equal(t, {{.TypeName}}(7), CeilToMultiple(7, -3))
		assert.Equal(t, {{.TypeName}}(8), CeilToMultiple(8, -3))
		assert.Equal(t, {{.TypeName}}(9), CeilToMultiple(9, -3))
		assert.Equal(t, {{.TypeName}}(-6), CeilToMultiple(-6, -3))
		assert.Equal(t, {{.TypeName}}(-7), CeilToMultiple(-7, -3))
		assert.Equal(t, {{.TypeName}}(-8), CeilToMultiple(-8, -3))
		assert.Equal(t, {{.TypeName}}(-9), CeilToMultiple(-9, -3))
	})
{{end -}}
}
