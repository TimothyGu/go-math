package {{.PackageName}}

// Code generated by generate/generate.go from math_test.go.tmpl. DO NOT EDIT.

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
{{if .Signed}}
	"{{.ParentPackageName}}/{{.UnsignedPackageName}}"
{{end}}
)

{{if .Signed}}
func ExampleAbs() {
	fmt.Println(Abs(0))
	fmt.Println(Abs(1))
	fmt.Println(Abs(-1))
	fmt.Println(Abs(MaxValue) == MaxValue)
	fmt.Println(Abs(MinValue) == MaxValue)
	// Output:
	// 0
	// 1
	// 1
	// true
	// true
}
{{end}}

func TestDim(t *testing.T) {
	assert.Equal(t, {{.UnsignedTypeName}}(0), Dim(0, 0))
	assert.Equal(t, {{.UnsignedTypeName}}(0), Dim(0, 1))
	assert.Equal(t, {{.UnsignedTypeName}}(1), Dim(1, 0))
	assert.Equal(t, {{.UnsignedTypeName}}(0), Dim(1, 1))
{{if .Signed}}
	assert.Equal(t, {{.UnsignedTypeName}}(2), Dim(1, -1))
	assert.Equal(t, {{.UnsignedTypeName}}(0), Dim(-1, 1))
	assert.Equal(t, {{.UnsignedTypeName}}(0), Dim(-1, -1))
{{end}}

	assert.Equal(t, {{.UnsignedTypeName}}(0), Dim(MaxValue, MaxValue))
	assert.Equal(t, {{.UnsignedTypeName}}(0), Dim(0, MaxValue))
	assert.Equal(t, {{.UnsignedTypeName}}(MaxValue), Dim(MaxValue, 0))
	assert.Equal(t, {{.UnsignedTypeName}}(0), Dim(MaxValue - 1, MaxValue))
	assert.Equal(t, {{.UnsignedTypeName}}(1), Dim(MaxValue, MaxValue - 1))
{{if .Signed}}
	assert.Equal(t, {{.UnsignedTypeName}}(0), Dim(MinValue, MaxValue))
	assert.Equal(t, {{.UnsignedTypeName}}({{.UnsignedPackageName}}.MaxValue), Dim(MaxValue, MinValue))
{{end}}
}

func ExampleMax() {
	fmt.Println(Max(0, 0))
	fmt.Println(Max(0, 1))
	fmt.Println(Max(1, 0))
	fmt.Println(Max(MaxValue, 0) == MaxValue)
	fmt.Println(Max(MinValue, MaxValue) == MaxValue)
	// Output:
	// 0
	// 1
	// 1
	// true
	// true
}

func TestMax(t *testing.T) {
	assert.Equal(t, {{.TypeName}}(0), Max(0, 0))
	assert.Equal(t, {{.TypeName}}(1), Max(0, 1))
	assert.Equal(t, {{.TypeName}}(1), Max(1, 0))
	assert.Equal(t, {{.TypeName}}(1), Max(1, 1))
{{if .Signed}}
	assert.Equal(t, {{.TypeName}}(1), Max(1, -1))
	assert.Equal(t, {{.TypeName}}(1), Max(-1, 1))
	assert.Equal(t, {{.TypeName}}(-1), Max(-1, -1))
{{end}}

	assert.Equal(t, {{.TypeName}}(MaxValue), Max(MaxValue, MaxValue))
	assert.Equal(t, {{.TypeName}}(MaxValue), Max(0, MaxValue))
	assert.Equal(t, {{.TypeName}}(MaxValue), Max(MaxValue, 0))
	assert.Equal(t, {{.TypeName}}(MaxValue), Max(MaxValue - 1, MaxValue))
	assert.Equal(t, {{.TypeName}}(MaxValue), Max(MaxValue, MaxValue - 1))
{{if .Signed}}
	assert.Equal(t, {{.TypeName}}(MaxValue), Max(MinValue, MaxValue))
	assert.Equal(t, {{.TypeName}}(MaxValue), Max(MaxValue, MinValue))
{{end}}
}

func ExampleMin() {
	fmt.Println(Min(1, 1))
	fmt.Println(Min(0, 1))
	fmt.Println(Min(1, 0))
	fmt.Println(Min(MinValue, 0) == MinValue)
	fmt.Println(Min(MinValue, MaxValue) == MinValue)
	// Output:
	// 1
	// 0
	// 0
	// true
	// true
}

func TestMin(t *testing.T) {
	assert.Equal(t, {{.TypeName}}(0), Min(0, 0))
	assert.Equal(t, {{.TypeName}}(0), Min(0, 1))
	assert.Equal(t, {{.TypeName}}(0), Min(1, 0))
	assert.Equal(t, {{.TypeName}}(1), Min(1, 1))
{{if .Signed}}
	assert.Equal(t, {{.TypeName}}(-1), Min(1, -1))
	assert.Equal(t, {{.TypeName}}(-1), Min(-1, 1))
	assert.Equal(t, {{.TypeName}}(-1), Min(-1, -1))
{{end}}

	assert.Equal(t, {{.TypeName}}(MaxValue), Min(MaxValue, MaxValue))
	assert.Equal(t, {{.TypeName}}(0), Min(0, MaxValue))
	assert.Equal(t, {{.TypeName}}(0), Min(MaxValue, 0))
{{if .Signed}}
	assert.Equal(t, {{.TypeName}}(MinValue), Min(MinValue, MaxValue))
	assert.Equal(t, {{.TypeName}}(MinValue), Min(MaxValue, MinValue))
{{end}}
}
